name: Build Service

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
  schedule:
    - cron: 40 9 * * *

jobs:
  build:
    runs-on: [ubuntu-latest]

    outputs:
      VERSION: ${{ steps.docker-build.outputs.VERSION }}

    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v4

      - id: docker-login
        name: Docker:Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - id: test
        name: Test
        shell: bash
        run: |
          ./test.sh

      - id: vitest-upload
        name: Vitest:Upload
        uses: actions/upload-artifact@v4
        with:
          name: vitest
          path: coverage/junit.xml
        if: ${{ always() }}

      - id: docker-build
        name: Docker:Build
        shell: bash
        run: |
          ./build-service.sh | tail -n1 >> $GITHUB_OUTPUT

      - id: upload-openapi-artifact
        name: OpenAPI:Upload
        uses: actions/upload-artifact@v4
        with:
          name: openapi
          path: build/${{ steps.docker-build.outputs.VERSION }}.json
        if: ${{ always() }}

      - id: image-push
        name: Docker:Push
        shell: bash
        run: |
          ./push.sh service

  mock-matrix:
    if: false
    needs: build

    strategy:
      matrix:
        configuration:
          [
            { runner: ubuntu-latest, platform: amd64 },
            { runner: ubuntu-24.04-arm, platform: arm64 },
          ]

    runs-on: ${{ matrix.configuration.runner }}

    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v4

      - id: docker-login
        name: Docker:Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - id: download-openapi-artifact
        name: OpenAPI:Download
        uses: actions/download-artifact@v4
        with:
          name: openapi

      - id: docker-build
        name: Docker:Build
        run: |
          ./build-using-version.sh mock ${{ needs.build.outputs.VERSION }} ${{ matrix.configuration.platform }}

      - id: docker-push
        name: Docker:Push
        run: ./push.sh mock ${{ matrix.configuration.platform }}

  mock:
    if: false
    runs-on: [ubuntu-latest]
    needs: [build, mock-matrix]

    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v4

      - id: docker-login
        name: Docker:Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - id: docker-push-latest
        name: Docker:push-latest
        run: |
          ./create-latest.sh mock

  documentation-matrix:
    if: false
    needs: build

    strategy:
      matrix:
        configuration:
          [
            { runner: ubuntu-latest, platform: amd64 },
            { runner: ubuntu-24.04-arm, platform: arm64 },
          ]

    runs-on: ${{ matrix.configuration.runner }}

    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v4

      - id: docker-login
        name: Docker:Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - id: download-openapi-artifact
        name: OpenAPI:Download
        uses: actions/download-artifact@v4
        with:
          name: openapi

      - id: docker-build
        name: Docker:Build
        run: |
          ./build-using-version.sh documentation ${{ needs.build.outputs.VERSION }} ${{ matrix.configuration.platform }}

      - id: docker-push
        name: Docker:Push
        run: ./push.sh documentation ${{ matrix.configuration.platform }}

  documentation:
    if: false
    runs-on: [ubuntu-latest]
    needs: [build, documentation-matrix]

    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v4

      - id: docker-login
        name: Docker:Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - id: docker-push-latest
        name: Docker:push-latest
        run: |
          ./create-latest.sh documentation
